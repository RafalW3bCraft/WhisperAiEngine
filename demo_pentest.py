#!/usr/bin/env python3
"""
G3r4ki Penetration Testing Demonstration
"""

import os
import sys
import socket
import argparse
from src.pentest.shells.reverse_shells import reverse_shells

def demo_shells(args):
    """Demonstrate reverse shell capabilities"""
    print("\n==== G3r4ki Reverse Shell Generator ====\n")
    
    if args.list:
        shell_types = reverse_shells.list_shell_types()
        print("Available shell types:")
        for shell_type in shell_types:
            print(f"  - {shell_type}")
        return
    
    if args.variants:
        variants = reverse_shells.list_shell_variants(args.variants)
        print(f"Variants for {args.variants} shells:")
        for variant in variants:
            print(f"  - {variant}")
        return
    
    # Generate a specific shell
    if args.type:
        ip = args.ip or reverse_shells.get_local_ip()
        port = args.port or 4444
        
        if args.variant:
            if args.type == "bash":
                shell = reverse_shells.get_bash_shell(args.variant, ip, port)
            elif args.type == "python":
                shell = reverse_shells.get_python_shell(args.variant, ip, port)
            elif args.type == "php":
                shell = reverse_shells.get_php_shell(args.variant, ip, port)
            elif args.type == "perl":
                shell = reverse_shells.get_perl_shell(args.variant, ip, port)
            elif args.type == "netcat":
                shell = reverse_shells.get_netcat_shell(args.variant, ip, port)
            elif args.type == "powershell":
                shell = reverse_shells.get_powershell_shell(args.variant, ip, port)
            else:
                print(f"Error: Unknown shell type '{args.type}'")
                return
            
            print(f"Generated {args.type} shell ({args.variant}):")
            print("-" * 50)
            print(shell)
            print("-" * 50)
            print(f"Target: {ip}:{port}")
            print("Start a listener with: nc -lvnp {port}")
        else:
            print(f"Error: Variant not specified for {args.type} shell")
            print(f"Use --variants {args.type} to see available variants")
        
        return
    
    # Generate all shells
    if args.all:
        ip = args.ip or reverse_shells.get_local_ip()
        port = args.port or 4444
        
        shells = reverse_shells.get_all_shells(ip, port)
        
        for shell_type, variants in shells.items():
            print(f"\n{shell_type.upper()} Shells:")
            print("-" * 50)
            
            for variant, command in variants.items():
                print(f"\n[{variant}]")
                print(command)
        
        print("\nTarget: {ip}:{port}")
        print("Start a listener with: nc -lvnp {port}")
        return
    
    # Default: show help
    print("G3r4ki Reverse Shell Generator")
    print("Usage examples:")
    print("  python demo_pentest.py shells --list")
    print("  python demo_pentest.py shells --variants bash")
    print("  python demo_pentest.py shells --type bash --variant basic --ip 192.168.1.10 --port 4444")
    print("  python demo_pentest.py shells --all --ip 192.168.1.10 --port 4444")

def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(description="G3r4ki Penetration Testing Demo")
    subparsers = parser.add_subparsers(dest="command", help="Command to run")
    
    # Shells command
    shells_parser = subparsers.add_parser("shells", help="Reverse shell generator")
    shells_parser.add_argument("--list", action="store_true", help="List available shell types")
    shells_parser.add_argument("--variants", type=str, help="List variants for a specific shell type")
    shells_parser.add_argument("--type", type=str, help="Shell type to generate")
    shells_parser.add_argument("--variant", type=str, help="Shell variant to generate")
    shells_parser.add_argument("--ip", type=str, help="IP address for reverse connection")
    shells_parser.add_argument("--port", type=int, help="Port for reverse connection")
    shells_parser.add_argument("--all", action="store_true", help="Generate all shell types")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    if args.command == "shells":
        demo_shells(args)
    else:
        print(f"Unknown command: {args.command}")
        parser.print_help()

if __name__ == "__main__":
    main()