"""
System-wide installation and uninstallation for G3r4ki.

This module provides functionality to install G3r4ki system-wide,
making it accessible from any directory, and to uninstall it cleanly.
"""

import os
import sys
import shutil
import logging
import subprocess
from typing import Dict, Any, Optional
import platform

logger = logging.getLogger(__name__)

class G3r4kiInstaller:
    """
    System-wide installer and uninstaller for G3r4ki.
    
    This class provides methods to:
    - Install G3r4ki system-wide
    - Uninstall G3r4ki from the system
    - Update an existing installation
    - Check the installation status
    """
    
    def __init__(self, source_dir: Optional[str] = None):
        """
        Initialize the installer.
        
        Args:
            source_dir: Source directory for installation files (defaults to current directory)
        """
        self.source_dir = source_dir or os.path.abspath(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
        self.system = platform.system()
        
        # Define installation directories based on platform
        if self.system == "Linux":
            self.install_dir = "/opt/g3r4ki"
            self.bin_dir = "/usr/local/bin"
            self.config_dir = os.path.expanduser("~/.config/g3r4ki")
        elif self.system == "Darwin":  # macOS
            self.install_dir = "/Applications/G3r4ki"
            self.bin_dir = "/usr/local/bin"
            self.config_dir = os.path.expanduser("~/Library/Application Support/G3r4ki")
        else:
            logger.error(f"Unsupported platform: {self.system}")
            raise ValueError(f"Unsupported platform: {self.system}. G3r4ki currently supports Linux and macOS.")
    
    def _check_permissions(self) -> bool:
        """
        Check if the process has sufficient permissions for installation.
        
        Returns:
            True if permissions are sufficient, False otherwise
        """
        try:
            # Try to create a test file in the target directory
            if not os.path.exists(self.install_dir):
                os.makedirs(self.install_dir)
                os.rmdir(self.install_dir)
            
            # Check bin directory
            test_file = os.path.join(self.bin_dir, "g3r4ki_test")
            with open(test_file, 'w') as f:
                f.write("test")
            os.remove(test_file)
            
            return True
        except (PermissionError, OSError):
            logger.error("Insufficient permissions for installation")
            return False
    
    def _create_directories(self) -> bool:
        """
        Create necessary directories for installation.
        
        Returns:
            True if successful, False otherwise
        """
        try:
            os.makedirs(self.install_dir, exist_ok=True)
            os.makedirs(self.config_dir, exist_ok=True)
            return True
        except (PermissionError, OSError) as e:
            logger.error(f"Failed to create directories: {e}")
            return False
    
    def _create_launcher_script(self) -> bool:
        """
        Create a launcher script in the bin directory.
        
        Returns:
            True if successful, False otherwise
        """
        try:
            launcher_path = os.path.join(self.bin_dir, "g3r4ki")
            
            script_content = f"""#!/bin/bash
# G3r4ki launcher script
# Auto-generated by G3r4ki installer

# Set environment variables
export G3R4KI_HOME="{self.install_dir}"
export G3R4KI_CONFIG="{self.config_dir}"

# Execute G3r4ki
python3 "$G3R4KI_HOME/g3r4ki.py" "$@"
"""
            
            with open(launcher_path, 'w') as f:
                f.write(script_content)
            
            # Make the launcher executable
            os.chmod(launcher_path, 0o755)
            
            logger.info(f"Created launcher script at {launcher_path}")
            return True
        except (PermissionError, OSError) as e:
            logger.error(f"Failed to create launcher script: {e}")
            return False
    
    def _copy_files(self) -> bool:
        """
        Copy files from source directory to installation directory.
        
        Returns:
            True if successful, False otherwise
        """
        try:
            # First clear the installation directory (except config)
            for item in os.listdir(self.install_dir):
                item_path = os.path.join(self.install_dir, item)
                if os.path.isdir(item_path):
                    shutil.rmtree(item_path)
                else:
                    os.remove(item_path)
            
            # Copy all files from source directory
            for item in os.listdir(self.source_dir):
                source_path = os.path.join(self.source_dir, item)
                dest_path = os.path.join(self.install_dir, item)
                
                # Skip hidden files and directories
                if item.startswith('.'):
                    continue
                
                # Skip config directory (handle separately)
                if item == "config":
                    continue
                
                if os.path.isdir(source_path):
                    shutil.copytree(source_path, dest_path)
                else:
                    shutil.copy2(source_path, dest_path)
            
            logger.info(f"Copied files from {self.source_dir} to {self.install_dir}")
            return True
        except (PermissionError, OSError, shutil.Error) as e:
            logger.error(f"Failed to copy files: {e}")
            return False
    
    def _setup_environment(self) -> bool:
        """
        Set up environment variables for G3r4ki.
        
        Returns:
            True if successful, False otherwise
        """
        try:
            # Create a shell script to set environment variables
            env_script_path = os.path.join(self.install_dir, "g3r4ki-env.sh")
            
            script_content = f"""#!/bin/bash
# G3r4ki environment variables
# Auto-generated by G3r4ki installer

export G3R4KI_HOME="{self.install_dir}"
export G3R4KI_CONFIG="{self.config_dir}"
export PATH="$PATH:{self.bin_dir}"
"""
            
            with open(env_script_path, 'w') as f:
                f.write(script_content)
            
            # Make the environment script executable
            os.chmod(env_script_path, 0o755)
            
            # Add to shell profile if possible
            profile_paths = [
                os.path.expanduser("~/.bashrc"),
                os.path.expanduser("~/.zshrc"),
                os.path.expanduser("~/.profile")
            ]
            
            source_line = f'# G3r4ki Environment\n[ -f "{env_script_path}" ] && source "{env_script_path}"\n'
            
            for profile_path in profile_paths:
                if os.path.exists(profile_path):
                    try:
                        with open(profile_path, 'r') as f:
                            content = f.read()
                        
                        # Check if already in profile
                        if env_script_path in content:
                            continue
                        
                        with open(profile_path, 'a') as f:
                            f.write("\n" + source_line)
                        
                        logger.info(f"Added environment setup to {profile_path}")
                    except (PermissionError, OSError) as e:
                        logger.warning(f"Could not update shell profile {profile_path}: {e}")
            
            return True
        except (PermissionError, OSError) as e:
            logger.error(f"Failed to set up environment: {e}")
            return False
    
    def install(self) -> bool:
        """
        Install G3r4ki system-wide.
        
        Returns:
            True if installation is successful, False otherwise
        """
        logger.info(f"Installing G3r4ki from {self.source_dir} to {self.install_dir}")
        
        # Check if we have the necessary permissions
        if not self._check_permissions():
            logger.error("Installation requires administrator/root privileges")
            return False
        
        # Create directories
        if not self._create_directories():
            return False
        
        # Copy files
        if not self._copy_files():
            return False
        
        # Create launcher script
        if not self._create_launcher_script():
            return False
        
        # Set up environment
        if not self._setup_environment():
            logger.warning("Environment setup incomplete")
        
        logger.info("G3r4ki installed successfully")
        return True
    
    def uninstall(self, keep_user_config: bool = True) -> bool:
        """
        Uninstall G3r4ki from the system.
        
        Args:
            keep_user_config: Whether to keep user configuration files
            
        Returns:
            True if uninstallation is successful, False otherwise
        """
        logger.info("Uninstalling G3r4ki")
        
        # Check if we have the necessary permissions
        if not self._check_permissions():
            logger.error("Uninstallation requires administrator/root privileges")
            return False
        
        try:
            # Remove launcher script
            launcher_path = os.path.join(self.bin_dir, "g3r4ki")
            if os.path.exists(launcher_path):
                os.remove(launcher_path)
                logger.info(f"Removed launcher script: {launcher_path}")
            
            # Remove installation directory
            if os.path.exists(self.install_dir):
                shutil.rmtree(self.install_dir)
                logger.info(f"Removed installation directory: {self.install_dir}")
            
            # Remove configuration directory if requested
            if not keep_user_config and os.path.exists(self.config_dir):
                shutil.rmtree(self.config_dir)
                logger.info(f"Removed configuration directory: {self.config_dir}")
            
            # Clean up shell profiles
            profile_paths = [
                os.path.expanduser("~/.bashrc"),
                os.path.expanduser("~/.zshrc"),
                os.path.expanduser("~/.profile")
            ]
            
            for profile_path in profile_paths:
                if os.path.exists(profile_path):
                    try:
                        with open(profile_path, 'r') as f:
                            lines = f.readlines()
                        
                        with open(profile_path, 'w') as f:
                            for line in lines:
                                if "G3r4ki" not in line and self.install_dir not in line:
                                    f.write(line)
                        
                        logger.info(f"Cleaned up shell profile: {profile_path}")
                    except (PermissionError, OSError) as e:
                        logger.warning(f"Could not update shell profile {profile_path}: {e}")
            
            logger.info("G3r4ki uninstalled successfully")
            return True
        except (PermissionError, OSError, shutil.Error) as e:
            logger.error(f"Failed to uninstall G3r4ki: {e}")
            return False
    
    def update(self) -> bool:
        """
        Update an existing G3r4ki installation.
        
        Returns:
            True if update is successful, False otherwise
        """
        logger.info(f"Updating G3r4ki installation at {self.install_dir}")
        
        # Check if G3r4ki is installed
        if not self.is_installed():
            logger.error("G3r4ki is not installed, cannot update")
            return False
        
        # Check if we have the necessary permissions
        if not self._check_permissions():
            logger.error("Update requires administrator/root privileges")
            return False
        
        # Update files (copy_files will clear the installation directory first)
        if not self._copy_files():
            return False
        
        # Update launcher script
        if not self._create_launcher_script():
            return False
        
        logger.info("G3r4ki updated successfully")
        return True
    
    def is_installed(self) -> bool:
        """
        Check if G3r4ki is installed.
        
        Returns:
            True if installed, False otherwise
        """
        # Check for installation directory
        if not os.path.exists(self.install_dir):
            return False
        
        # Check for launcher script
        launcher_path = os.path.join(self.bin_dir, "g3r4ki")
        if not os.path.exists(launcher_path):
            return False
        
        # Check if the launcher is valid
        try:
            with open(launcher_path, 'r') as f:
                content = f.read()
            
            if "G3r4ki" not in content or self.install_dir not in content:
                return False
        except (PermissionError, OSError):
            return False
        
        return True
    
    def get_installation_info(self) -> Dict[str, Any]:
        """
        Get information about the G3r4ki installation.
        
        Returns:
            Dictionary with installation information
        """
        installed = self.is_installed()
        
        info = {
            "installed": installed,
            "install_dir": self.install_dir if installed else None,
            "bin_dir": self.bin_dir if installed else None,
            "config_dir": self.config_dir if installed else None,
            "launcher_path": os.path.join(self.bin_dir, "g3r4ki") if installed else None,
            "installed_version": None
        }
        
        # Get version if installed
        if installed:
            version_file = os.path.join(self.install_dir, "VERSION")
            if os.path.exists(version_file):
                try:
                    with open(version_file, 'r') as f:
                        info["installed_version"] = f.read().strip()
                except (PermissionError, OSError):
                    pass
            
            # Alternatively try to get from Python package
            if not info["installed_version"]:
                try:
                    # Run the installed g3r4ki with --version
                    result = subprocess.run([os.path.join(self.bin_dir, "g3r4ki"), "--version"], 
                                          capture_output=True, text=True)
                    if result.returncode == 0:
                        info["installed_version"] = result.stdout.strip()
                except (subprocess.SubprocessError, FileNotFoundError):
                    pass
        
        return info


def install_g3r4ki(source_dir: Optional[str] = None) -> bool:
    """
    Install G3r4ki system-wide.
    
    Args:
        source_dir: Source directory for installation files
        
    Returns:
        True if installation is successful, False otherwise
    """
    installer = G3r4kiInstaller(source_dir)
    return installer.install()


def uninstall_g3r4ki(keep_user_config: bool = True) -> bool:
    """
    Uninstall G3r4ki from the system.
    
    Args:
        keep_user_config: Whether to keep user configuration files
        
    Returns:
        True if uninstallation is successful, False otherwise
    """
    installer = G3r4kiInstaller()
    return installer.uninstall(keep_user_config)


def update_g3r4ki(source_dir: Optional[str] = None) -> bool:
    """
    Update an existing G3r4ki installation.
    
    Args:
        source_dir: Source directory for installation files
        
    Returns:
        True if update is successful, False otherwise
    """
    installer = G3r4kiInstaller(source_dir)
    return installer.update()


def is_g3r4ki_installed() -> bool:
    """
    Check if G3r4ki is installed.
    
    Returns:
        True if installed, False otherwise
    """
    installer = G3r4kiInstaller()
    return installer.is_installed()


def get_g3r4ki_installation_info() -> Dict[str, Any]:
    """
    Get information about the G3r4ki installation.
    
    Returns:
        Dictionary with installation information
    """
    installer = G3r4kiInstaller()
    return installer.get_installation_info()