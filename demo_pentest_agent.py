#!/usr/bin/env python3
"""
Demo script to show the G3r4ki Pentest Agent system in action
"""

import os
import sys
import json
import time
from datetime import datetime

# Add the current directory to the path so G3r4ki modules can be imported
sys.path.insert(0, os.getcwd())

from src.config import load_config
from src.agents.core import AgentManager
from src.agents.types.pentest_agent import PentestAgent

def main():
    """Run the penetration testing agent demo"""
    print("\n===== G3r4ki Pentest Agent Demo =====\n")
    
    # Load configuration
    config = load_config()
    
    # Initialize agent manager
    agent_manager = AgentManager(config)
    
    # Register agent types
    agent_manager.register_agent_type("pentest", PentestAgent)
    
    print("Pentest agent system initialized")
    
    # Show agent status
    print("\n--- Agent Status ---")
    agent_count = len(agent_manager.list_agents())
    print(f"Active Agents: {agent_count}")
    print(f"Agent Types: pentest")
    
    # Create a new agent
    target = "demo.local"
    agent_name = f"demo-pentest-{int(time.time())}"
    print(f"\n--- Creating Agent ---")
    print(f"Creating pentest agent '{agent_name}' targeting {target}...")
    
    # Create agent
    try:
        agent = agent_manager.create_agent(
            agent_type="pentest",
            name=agent_name,
            description=f"Demo penetration testing agent for target {target}"
        )
    except Exception as e:
        print(f"Error creating agent: {str(e)}")
        agent = None
    
    if agent:
        # Configure the agent
        agent.set_target(target)
        print(f"Agent created with ID: {agent.agent_id}")
        
        # List the agents
        print("\n--- Listing Agents ---")
        agents = agent_manager.list_agents()
        for agent_info in agents:
            print(f"ID: {agent_info['id']}")
            print(f"Name: {agent_info['name']}")
            print(f"Status: {agent_info['status']}")
            print(f"Created: {agent_info['created_at']}")
            print()
        
        # Generate the plan
        print(f"\n--- Agent Planning ---")
        print("Generating penetration testing plan...")
        plan = agent.plan()
        
        if "steps" in plan and plan["steps"]:
            print(f"Plan generated with {len(plan['steps'])} steps:")
            for step in plan["steps"]:
                print(f"  Step {step.get('id')}: {step.get('name')} - using {step.get('skill')}")
        else:
            print("No steps in the plan or error occurred.")
        
        # Demonstrate shell generation capabilities
        print("\n--- Shell Generation Capabilities ---")
        shells = agent.generate_shell_examples()
        print(f"Generated {len(shells)} example shells for potential exploitation.")
        
        # Show a sample shell
        print("\nSample Bash Reverse Shell:")
        print("-" * 60)
        print(shells.get('bash', {}).get('basic', 'No bash shell available'))
        print("-" * 60)
        
        # Run the agent
        print("\n--- Running Agent ---")
        print(f"Would normally execute the agent with: agent_manager.run_agent('{agent.agent_id}')")
        print("(Not running automatically to prevent actual penetration testing)")
        
        # Generate a report
        print("\n--- Generating Report ---")
        print("Would normally generate a report with: agent.generate_report()")
        print("(Not generating automatically since pen test wasn't performed)")
        
        # Results would be in the 'results/' directory
        print("\nResults would be stored in the following directories:")
        print("- results/pentest/ - Penetration test results")
        print("- results/exploits/ - Generated exploit payloads")
        print("- results/shells/ - Generated shell scripts")
    
    print("\n===== Demo Complete =====\n")
    
if __name__ == "__main__":
    main()